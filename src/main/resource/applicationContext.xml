<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">
   
   	
   	<!-- jdbc配置文件 -->
	<context:property-placeholder location="classpath:jdbc.properties"/>
	
	<!-- 配置数据源 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
	</bean>	
	
	<!-- 配置hibernate的SessionFactory -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<!-- 注入连接池 -->
		<property name="dataSource" ref="dataSource"/>
		<!-- hibernate属性配置 -->
		<property name="hibernateProperties">
			<props>
				<!-- 显示SQL -->
				<prop key="hibernate.show_sql">true</prop>
				<!-- 将SQL格式化  -->
				<prop key="hibernate.format_sql">true</prop>
				<!-- 是否自动创建表结构  -->
				<prop key="hibernate.hbm2ddl.auto">update</prop>				
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</prop>
		     </props> 
		</property>
		<!-- 扫描并加载注解过的实体类 -->
		<property name="packagesToScan" value="com.gsww.entity"/>
	</bean>
	
	<!-- 配置Hibernate实体 -->
	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate5.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	
	<!-- 配置事务管理对象 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	
	<!-- 然后是声明一个事物建议tx:advice,spring为我们提供了事物的封装，这个就是封装在了<tx:advice/>中
  	<tx:advice/>有一个transaction-manager属性，我们可以用它来指定我们的事物由谁来管理。 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 指定所有get*,find*开头的方法执行在只读事务上下文中
			SUPPORTS的含义是，支持当前事务，如果没有事务那么就不在事务中运行。
            SUPPORTS传播性的逻辑含义比较模糊，因此一般是不推荐使用的。 -->
			<tx:method name="get*" read-only="true" propagation="SUPPORTS"/>
			<tx:method name="find*" read-only="true" propagation="SUPPORTS"/>
			<!-- 其余方法执行在默认的读写上下文中  
			 REQUIRED的含义是，支持当前已经存在的事务，如果还没有事务，就创建一个新事务 -->
			 <tx:method name="*" propagation="REQUIRED"/> 
		</tx:attributes>
	</tx:advice>
	
	<!-- 配置切面拦截 -->
    <aop:config>
       <!--  expression="execution(* com.baidu.service.*.*(..))"
   		    其中第一个*代表返回值，第二*代表service包下的类名，第三个*代表方法名，“（..）”代表方法参数。-->
        <aop:pointcut id="txPointcut" expression="execution(* com.gsww.service.*.*(..))"/>
        	<!--然后我们用一个通知器：<aop:advisor/>把这个切面和tx:advice绑定在一起，
        	表示当这个切面：txPointcut执行时tx:advice定义的通知逻辑将被执行 -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
    </aop:config>

 
	<!-- 启用注解 -->
    <!-- <context:component-scan>:不仅具备<context:annotation-config>的所有功能，
   	还可以在指定的package下面扫描对应的bean
 	<context:annotation-config />和 <context:component-scan>同时存在的时候，
  	前者会被忽略。 -->

    <!-- <context:annotation-config/> -->
    <context:component-scan base-package="com.gsww.dao"/>
    <context:component-scan base-package="com.gsww.service"/>


</beans>